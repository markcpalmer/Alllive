//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Alllive.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AllliveDBEntities : DbContext
    {
        public AllliveDBEntities()
            : base("name=AllliveDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<password> passwords { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<ScheduleMeeting> ScheduleMeetings { get; set; }
        public virtual DbSet<TutorProfile> TutorProfiles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<SearchTutor> SearchTutors { get; set; }
        public virtual DbSet<Image> Images { get; set; }
    
        public virtual int CancelMeeting(Nullable<int> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelMeeting", sessionIDParameter);
        }
    
        public virtual int EditMeeting(Nullable<int> sessionID, string sessionName, string description, Nullable<System.DateTime> date, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string timeZone, Nullable<bool> recurr, Nullable<int> frequency, Nullable<int> repeatDaily, Nullable<int> repeatWeekly, Nullable<int> repeatMonthly, Nullable<bool> sunday, Nullable<bool> monday, Nullable<bool> tuesday, Nullable<bool> wednesday, Nullable<bool> thursday, Nullable<bool> friday, Nullable<bool> saturday, Nullable<bool> repeatMonthRadio1, Nullable<bool> repeatMonthRadio2, Nullable<int> radio2List1, Nullable<int> radio2List2, Nullable<System.DateTime> endDateBy, Nullable<int> endDateAfter, string meetingLink)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var sessionNameParameter = sessionName != null ?
                new ObjectParameter("SessionName", sessionName) :
                new ObjectParameter("SessionName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var recurrParameter = recurr.HasValue ?
                new ObjectParameter("Recurr", recurr) :
                new ObjectParameter("Recurr", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var repeatDailyParameter = repeatDaily.HasValue ?
                new ObjectParameter("RepeatDaily", repeatDaily) :
                new ObjectParameter("RepeatDaily", typeof(int));
    
            var repeatWeeklyParameter = repeatWeekly.HasValue ?
                new ObjectParameter("RepeatWeekly", repeatWeekly) :
                new ObjectParameter("RepeatWeekly", typeof(int));
    
            var repeatMonthlyParameter = repeatMonthly.HasValue ?
                new ObjectParameter("RepeatMonthly", repeatMonthly) :
                new ObjectParameter("RepeatMonthly", typeof(int));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("Sunday", sunday) :
                new ObjectParameter("Sunday", typeof(bool));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("Monday", monday) :
                new ObjectParameter("Monday", typeof(bool));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("Tuesday", tuesday) :
                new ObjectParameter("Tuesday", typeof(bool));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("Wednesday", wednesday) :
                new ObjectParameter("Wednesday", typeof(bool));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("Thursday", thursday) :
                new ObjectParameter("Thursday", typeof(bool));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("Friday", friday) :
                new ObjectParameter("Friday", typeof(bool));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("Saturday", saturday) :
                new ObjectParameter("Saturday", typeof(bool));
    
            var repeatMonthRadio1Parameter = repeatMonthRadio1.HasValue ?
                new ObjectParameter("RepeatMonthRadio1", repeatMonthRadio1) :
                new ObjectParameter("RepeatMonthRadio1", typeof(bool));
    
            var repeatMonthRadio2Parameter = repeatMonthRadio2.HasValue ?
                new ObjectParameter("RepeatMonthRadio2", repeatMonthRadio2) :
                new ObjectParameter("RepeatMonthRadio2", typeof(bool));
    
            var radio2List1Parameter = radio2List1.HasValue ?
                new ObjectParameter("Radio2List1", radio2List1) :
                new ObjectParameter("Radio2List1", typeof(int));
    
            var radio2List2Parameter = radio2List2.HasValue ?
                new ObjectParameter("Radio2List2", radio2List2) :
                new ObjectParameter("Radio2List2", typeof(int));
    
            var endDateByParameter = endDateBy.HasValue ?
                new ObjectParameter("EndDateBy", endDateBy) :
                new ObjectParameter("EndDateBy", typeof(System.DateTime));
    
            var endDateAfterParameter = endDateAfter.HasValue ?
                new ObjectParameter("EndDateAfter", endDateAfter) :
                new ObjectParameter("EndDateAfter", typeof(int));
    
            var meetingLinkParameter = meetingLink != null ?
                new ObjectParameter("MeetingLink", meetingLink) :
                new ObjectParameter("MeetingLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditMeeting", sessionIDParameter, sessionNameParameter, descriptionParameter, dateParameter, startTimeParameter, endTimeParameter, timeZoneParameter, recurrParameter, frequencyParameter, repeatDailyParameter, repeatWeeklyParameter, repeatMonthlyParameter, sundayParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, repeatMonthRadio1Parameter, repeatMonthRadio2Parameter, radio2List1Parameter, radio2List2Parameter, endDateByParameter, endDateAfterParameter, meetingLinkParameter);
        }
    
        public virtual int insertregistereduser(string username, string lastName, string firstName, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertregistereduser", usernameParameter, lastNameParameter, firstNameParameter, passwordParameter);
        }
    
        public virtual int insertscheduledmeeting(string sessionName, string description, Nullable<System.DateTime> date, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string timeZone, Nullable<bool> recurr, Nullable<int> frequency, Nullable<int> repeatDaily, Nullable<int> repeatWeekly, Nullable<int> repeatMonthly, Nullable<bool> sunday, Nullable<bool> monday, Nullable<bool> tuesday, Nullable<bool> wednesday, Nullable<bool> thursday, Nullable<bool> friday, Nullable<bool> saturday, Nullable<bool> repeatMonthRadio1, Nullable<bool> repeatMonthRadio2, Nullable<int> radio2List1, Nullable<int> radio2List2, Nullable<System.DateTime> endDateBy, Nullable<int> endDateAfter, Nullable<int> userID, string meetingLink)
        {
            var sessionNameParameter = sessionName != null ?
                new ObjectParameter("SessionName", sessionName) :
                new ObjectParameter("SessionName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            var recurrParameter = recurr.HasValue ?
                new ObjectParameter("Recurr", recurr) :
                new ObjectParameter("Recurr", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var repeatDailyParameter = repeatDaily.HasValue ?
                new ObjectParameter("RepeatDaily", repeatDaily) :
                new ObjectParameter("RepeatDaily", typeof(int));
    
            var repeatWeeklyParameter = repeatWeekly.HasValue ?
                new ObjectParameter("RepeatWeekly", repeatWeekly) :
                new ObjectParameter("RepeatWeekly", typeof(int));
    
            var repeatMonthlyParameter = repeatMonthly.HasValue ?
                new ObjectParameter("RepeatMonthly", repeatMonthly) :
                new ObjectParameter("RepeatMonthly", typeof(int));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("Sunday", sunday) :
                new ObjectParameter("Sunday", typeof(bool));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("Monday", monday) :
                new ObjectParameter("Monday", typeof(bool));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("Tuesday", tuesday) :
                new ObjectParameter("Tuesday", typeof(bool));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("Wednesday", wednesday) :
                new ObjectParameter("Wednesday", typeof(bool));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("Thursday", thursday) :
                new ObjectParameter("Thursday", typeof(bool));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("Friday", friday) :
                new ObjectParameter("Friday", typeof(bool));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("Saturday", saturday) :
                new ObjectParameter("Saturday", typeof(bool));
    
            var repeatMonthRadio1Parameter = repeatMonthRadio1.HasValue ?
                new ObjectParameter("RepeatMonthRadio1", repeatMonthRadio1) :
                new ObjectParameter("RepeatMonthRadio1", typeof(bool));
    
            var repeatMonthRadio2Parameter = repeatMonthRadio2.HasValue ?
                new ObjectParameter("RepeatMonthRadio2", repeatMonthRadio2) :
                new ObjectParameter("RepeatMonthRadio2", typeof(bool));
    
            var radio2List1Parameter = radio2List1.HasValue ?
                new ObjectParameter("Radio2List1", radio2List1) :
                new ObjectParameter("Radio2List1", typeof(int));
    
            var radio2List2Parameter = radio2List2.HasValue ?
                new ObjectParameter("Radio2List2", radio2List2) :
                new ObjectParameter("Radio2List2", typeof(int));
    
            var endDateByParameter = endDateBy.HasValue ?
                new ObjectParameter("EndDateBy", endDateBy) :
                new ObjectParameter("EndDateBy", typeof(System.DateTime));
    
            var endDateAfterParameter = endDateAfter.HasValue ?
                new ObjectParameter("EndDateAfter", endDateAfter) :
                new ObjectParameter("EndDateAfter", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var meetingLinkParameter = meetingLink != null ?
                new ObjectParameter("MeetingLink", meetingLink) :
                new ObjectParameter("MeetingLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertscheduledmeeting", sessionNameParameter, descriptionParameter, dateParameter, startTimeParameter, endTimeParameter, timeZoneParameter, recurrParameter, frequencyParameter, repeatDailyParameter, repeatWeeklyParameter, repeatMonthlyParameter, sundayParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, repeatMonthRadio1Parameter, repeatMonthRadio2Parameter, radio2List1Parameter, radio2List2Parameter, endDateByParameter, endDateAfterParameter, userIDParameter, meetingLinkParameter);
        }
    
        public virtual ObjectResult<UserSchedule_Result> UserSchedule(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSchedule_Result>("UserSchedule", userIDParameter);
        }
    }
}
